{"mappings":"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","sources":["src/index.tsx","src/util/index.ts","src/util/touch-util.ts","src/util/caret-util.ts","src/styles.module.css","src/constants/TriggerKeys.ts","src/util/suggestion-from-custom_api.ts"],"sourcesContent":["import * as React from \"react\";\r\nimport { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\r\nimport getCaretCoordinates from \"textarea-caret\";\r\nimport classes from \"./styles.module.css\";\r\nimport { IndicTransliterateProps } from \"./interfaces/Props\";\r\nimport { Language } from \"./types/Language\";\r\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\r\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\r\nimport { fetchSuggestionFromCustomApi } from \"./util/suggestion-from-custom_api\";\r\n\r\nconst KEY_UP = \"ArrowUp\";\r\nconst KEY_DOWN = \"ArrowDown\";\r\nconst KEY_ESCAPE = \"Escape\";\r\n\r\nconst OPTION_LIST_Y_OFFSET = 10;\r\nconst OPTION_LIST_MIN_WIDTH = 100;\r\n\r\nexport const IndicTransliterate = ({\r\n  renderComponent = (props) => <input {...props} />,\r\n  lang = \"hi\",\r\n  offsetX = 0,\r\n  offsetY = 10,\r\n  onChange,\r\n  onChangeText,\r\n  onBlur,\r\n  value,\r\n  onKeyDown,\r\n  transliterationModelId,\r\n  customApiURL,\r\n  customSuggestions,\r\n  containerClassName = \"\",\r\n  containerStyles = {},\r\n  activeItemStyles = {},\r\n  suggestionListStyle = {},\r\n  maxOptions = 5,\r\n  hideSuggestionBoxOnMobileDevices = false,\r\n  hideSuggestionBoxBreakpoint = 450,\r\n  triggerKeys = [\r\n    TriggerKeys.KEY_SPACE,\r\n    TriggerKeys.KEY_ENTER,\r\n    TriggerKeys.KEY_RETURN,\r\n    TriggerKeys.KEY_TAB,\r\n  ],\r\n  insertCurrentSelectionOnBlur = true,\r\n  showCurrentWordAsLastSuggestion = true,\r\n  enabled = true,\r\n  ...rest\r\n}: IndicTransliterateProps): JSX.Element => {\r\n  const [options, setOptions] = useState<string[]>([]);\r\n  const [left, setLeft] = useState(0);\r\n  const [top, setTop] = useState(0);\r\n  const [selection, setSelection] = useState<number>(0);\r\n  const [matchStart, setMatchStart] = useState(-1);\r\n  const [matchEnd, setMatchEnd] = useState(-1);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\r\n  const [direction, setDirection] = useState(\"ltr\");\r\n  const [googleFont, setGoogleFont] = useState<string | null>(null);\r\n\r\n  const shouldRenderSuggestions = useMemo(\r\n    () =>\r\n      hideSuggestionBoxOnMobileDevices\r\n        ? windowSize.width > hideSuggestionBoxBreakpoint\r\n        : true,\r\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\r\n  );\r\n\r\n  const reset = () => {\r\n    // reset the component\r\n    setSelection(0);\r\n    setOptions([]);\r\n  };\r\n\r\n  const handleSelection = (index: number, triggerKey = \" \") => {\r\n    const currentString = value;\r\n    // create a new string with the currently typed word\r\n    // replaced with the word in transliterated language\r\n    const newValue =\r\n      currentString.substring(0, matchStart) +\r\n      options[index] +\r\n      \" \" +\r\n      currentString.substring(matchEnd + 1, currentString.length);\r\n\r\n    // set the position of the caret (cursor) one character after the\r\n    // the position of the new word\r\n    setTimeout(() => {\r\n      setCaretPosition(\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        inputRef.current!,\r\n        triggerKey === \"Enter\"\r\n          ? matchStart + options[index].length\r\n          : matchStart + options[index].length + 1,\r\n      );\r\n    }, 1);\r\n\r\n    // bubble up event to the parent component\r\n    const e = {\r\n      target: { value: newValue },\r\n    } as unknown as React.FormEvent<HTMLInputElement>;\r\n    onChangeText(newValue);\r\n    onChange && onChange(e);\r\n    reset();\r\n    return inputRef.current?.focus();\r\n  };\r\n\r\n  const renderSuggestions = async (lastWord: string) => {\r\n    if (!shouldRenderSuggestions) {\r\n      return;\r\n    }\r\n    // fetch suggestion from api\r\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\r\n\r\n    const numOptions = showCurrentWordAsLastSuggestion\r\n      ? maxOptions - 1\r\n      : maxOptions;\r\n\r\n    const data = await fetchSuggestionFromCustomApi(lastWord, customApiURL, transliterationModelId);\r\n\r\n    console.log(\"data ------ \", data);\r\n    setOptions(data ? data : []);\r\n  };\r\n\r\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n    const value = e.currentTarget.value;\r\n\r\n    // bubble up event to the parent component\r\n    onChange && onChange(e);\r\n    onChangeText(value);\r\n\r\n    if (!shouldRenderSuggestions) {\r\n      return;\r\n    }\r\n\r\n    // get the current index of the cursor\r\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\r\n    const input = inputRef.current;\r\n\r\n    if (!input) return;\r\n\r\n    const caretPos = getCaretCoordinates(input, caret);\r\n\r\n    // search for the last occurence of the space character from\r\n    // the cursor\r\n    const indexOfLastSpace =\r\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\r\n        ? value.lastIndexOf(\"\\n\", caret - 1)\r\n        : value.lastIndexOf(\" \", caret - 1);\r\n\r\n    // first character of the currently being typed word is\r\n    // one character after the space character\r\n    // index of last character is one before the current position\r\n    // of the caret\r\n    setMatchStart(indexOfLastSpace + 1);\r\n    setMatchEnd(caret - 1);\r\n\r\n    // currentWord is the word that is being typed\r\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\r\n    if (currentWord && enabled) {\r\n      // make an api call to fetch suggestions\r\n      renderSuggestions(currentWord);\r\n\r\n      const rect = input.getBoundingClientRect();\r\n\r\n      // calculate new left and top of the suggestion list\r\n\r\n      // minimum of the caret position in the text input and the\r\n      // width of the text input\r\n      const left = Math.min(\r\n        caretPos.left,\r\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\r\n      );\r\n\r\n      // minimum of the caret position from the top of the input\r\n      // and the height of the input\r\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\r\n\r\n      setTop(top);\r\n      setLeft(left);\r\n    } else {\r\n      reset();\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\r\n    const helperVisible = options.length > 0;\r\n\r\n    if (helperVisible) {\r\n      if (triggerKeys.includes(event.key)) {\r\n        event.preventDefault();\r\n        handleSelection(selection, event.key);\r\n      } else {\r\n        switch (event.key) {\r\n          case KEY_ESCAPE:\r\n            event.preventDefault();\r\n            reset();\r\n            break;\r\n          case KEY_UP:\r\n            event.preventDefault();\r\n            setSelection((options.length + selection - 1) % options.length);\r\n            break;\r\n          case KEY_DOWN:\r\n            event.preventDefault();\r\n            setSelection((selection + 1) % options.length);\r\n            break;\r\n          default:\r\n            onKeyDown && onKeyDown(event);\r\n            break;\r\n        }\r\n      }\r\n    } else {\r\n      onKeyDown && onKeyDown(event);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (\r\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\r\n  ) => {\r\n    if (!isTouchEnabled()) {\r\n      if (insertCurrentSelectionOnBlur && options[selection]) {\r\n        handleSelection(selection);\r\n      } else {\r\n        reset();\r\n      }\r\n    }\r\n    onBlur && onBlur(event);\r\n  };\r\n\r\n  const handleResize = () => {\r\n    // TODO implement the resize function to resize\r\n    // the helper on screen size change\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    setWindowSize({ width, height });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", handleResize);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    setWindowSize({ width, height });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      // position relative is required to show the component\r\n      // in the correct position\r\n      style={{\r\n        ...containerStyles,\r\n        position: \"relative\",\r\n      }}\r\n      className={containerClassName}\r\n    >\r\n      {renderComponent({\r\n        onChange: handleChange,\r\n        onKeyDown: handleKeyDown,\r\n        onBlur: handleBlur,\r\n        ref: inputRef,\r\n        value: value,\r\n        \"data-testid\": \"rt-input-component\",\r\n        lang: lang,\r\n        style: {\r\n          direction: direction,\r\n          ...(googleFont && { fontFamily: googleFont }),\r\n        },\r\n        ...rest,\r\n      })}\r\n      {shouldRenderSuggestions && options.length > 0 && (\r\n        <ul\r\n          style={{\r\n            backgroundClip : \"padding-box\",\r\n            backgroundColor : \"#fff\",\r\n            border : \"1px solid rgba(0, 0, 0, 0.15)\",\r\n            boxShadow : \"0 6px 12px rgba(0, 0, 0, 0.175)\",\r\n            display: \"block\",\r\n            fontSize: \"14px\",\r\n            listStyle: \"none\",\r\n            padding: \"1px\",\r\n            textAlign: \"left\",\r\n            zIndex: 20000,\r\n            left: `${left + offsetX}px`,\r\n            top: `${top + offsetY}px`,\r\n            position: \"absolute\",\r\n            width: \"auto\",\r\n            ...suggestionListStyle,\r\n            ...(googleFont && { fontFamily: googleFont }),\r\n            \r\n          }}\r\n          className={classes.ReactTransliterate}\r\n          data-testid=\"rt-suggestions-list\"\r\n          lang={lang}\r\n        >\r\n          {/*\r\n           * convert to set and back to prevent duplicate list items\r\n           * that might happen while using backspace\r\n           */}\r\n          {Array.from(new Set(options)).map((item, index) => (\r\n            <li\r\n              className={index === selection ? classes.Active : undefined}\r\n              style={index === selection ? activeItemStyles || {} : {}}\r\n              onMouseEnter={() => {\r\n                setSelection(index);\r\n              }}\r\n              onClick={() => handleSelection(index)}\r\n              key={item}\r\n            >\r\n              {item}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type { IndicTransliterateProps, Language };\r\nexport { TriggerKeys };","import { isTouchEnabled } from \"./touch-util\";\r\nimport { getInputSelection, setCaretPosition } from \"./caret-util\";\r\n\r\nexport { isTouchEnabled, getInputSelection, setCaretPosition };\r\n","export function isTouchEnabled() {\r\n  return (\r\n    \"ontouchstart\" in window ||\r\n    navigator.maxTouchPoints > 0 ||\r\n    navigator.msMaxTouchPoints > 0\r\n  );\r\n}\r\n","export function getInputSelection(el: HTMLInputElement) {\r\n  const start = 0;\r\n  const end = 0;\r\n\r\n  if (!el) {\r\n    return { start, end };\r\n  }\r\n\r\n  if (\r\n    typeof el.selectionStart === \"number\" &&\r\n    typeof el.selectionEnd === \"number\"\r\n  ) {\r\n    return { start: el.selectionStart, end: el.selectionEnd };\r\n  }\r\n\r\n  return { start, end };\r\n}\r\n\r\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\r\n  if (elem) {\r\n    if (elem.selectionStart) {\r\n      elem.focus();\r\n      elem.setSelectionRange(caretPos, caretPos);\r\n    } else {\r\n      elem.focus();\r\n    }\r\n  }\r\n}\r\n",".ReactTransliterate {\r\n  background-clip: padding-box;\r\n  background-color: #fff;\r\n  border: 1px solid rgba(0, 0, 0, 0.15);\r\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\r\n  display: block;\r\n  font-size: 14px;\r\n  list-style: none;\r\n  padding: 1px;\r\n  text-align: left;\r\n  z-index: 20000;\r\n  width: 100%;\r\n}\r\n\r\n.ReactTransliterate > li {\r\n  cursor: pointer;\r\n  padding: 10px;\r\n  min-width: 100px;\r\n}\r\n\r\n.Active {\r\n  background-color: #65c3d7;\r\n  color: #fff;\r\n}\r\n","export const TriggerKeys = {\r\n  KEY_RETURN: \"Enter\",\r\n  KEY_ENTER: \"Enter\",\r\n  KEY_TAB: \"Tab\",\r\n  KEY_SPACE: \" \",\r\n};\r\n","export const fetchSuggestionFromCustomApi = async (word: string, customApiURL: string, transliterationModelId: string) => {\r\n\r\n    let reqBody = {\r\n        modelId: `${transliterationModelId}`,\r\n        task: \"transliteration\",\r\n        input: [{ \"source\": `${word}` }],\r\n    }\r\n\r\n    let reqHeader = {\r\n        \"content-type\": \"application/json\"\r\n    }\r\n\r\n    const res = await fetch(\r\n        customApiURL, {\r\n        method: \"POST\",\r\n        body: JSON.stringify(reqBody),\r\n        headers: reqHeader\r\n    })\r\n\r\n    const response = await res.json();\r\n\r\n    if(response && response?.output[0]?.target && response?.output[0]?.target?.length > 0){\r\n        let found = [...response?.output[0]?.target, word]\r\n        return found;\r\n    } else {\r\n        return [word];\r\n    }\r\n\r\n}"],"names":[],"version":3,"file":"index.js.map"}